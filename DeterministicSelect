package com.assignment1;

import java.util.Arrays;

public final class DeterministicSelect {
    private DeterministicSelect() {}

    /**
     * Find k-th smallest element (0-based index).
     */
    public static int select(int[] a, int k) {
        if (a == null || a.length == 0) throw new IllegalArgumentException("Array empty");
        if (k < 0 || k >= a.length) throw new IllegalArgumentException("k out of range");
        return selectRec(a, 0, a.length - 1, k);
    }

    private static int selectRec(int[] a, int l, int r, int k) {
        while (true) {
            if (l == r) return a[l];

            // медиана медиан
            int pivot = medianOfMedians(a, l, r);
            int pivotIndex = partition(a, l, r, pivot);

            if (k == pivotIndex) return a[k];
            else if (k < pivotIndex) {
                r = pivotIndex - 1;
            } else {
                l = pivotIndex + 1;
            }
        }
    }

    private static int partition(int[] a, int l, int r, int pivot) {
        int i = l, j = r;
        while (i <= j) {
            while (a[i] < pivot) { SortMetrics.addComparisons(1); i++; }
            while (a[j] > pivot) { SortMetrics.addComparisons(1); j--; }
            if (i <= j) {
                Utils.swap(a, i, j);
                i++; j--;
            }
        }
        return i - 1; // return final pivot pos approx
    }

    private static int medianOfMedians(int[] a, int l, int r) {
        int n = r - l + 1;
        if (n <= 5) {
            int[] tmp = Arrays.copyOfRange(a, l, r + 1);
            Arrays.sort(tmp);
            return tmp[n / 2];
        }

        int groups = (int) Math.ceil(n / 5.0);
        int[] medians = new int[groups];
        for (int i = 0; i < groups; i++) {
            int start = l + i * 5;
            int end = Math.min(start + 4, r);
            int[] tmp = Arrays.copyOfRange(a, start, end + 1);
            Arrays.sort(tmp);
            medians[i] = tmp[tmp.length / 2];
        }
        return medianOfMedians(medians, 0, groups - 1);
    }
}
